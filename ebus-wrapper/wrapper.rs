/* automatically generated by rust-bindgen */

# [ allow ( non_snake_case , non_camel_case_types , non_upper_case_globals ) ] pub mod root { # [ allow ( unused_imports ) ] use self :: super :: root ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct EBUSState { _unused : [ u8 ; 0 ] , } extern "C" { pub fn mkstate ( ) -> * mut root::EBUSState ; } extern "C" { pub fn w_connect ( state : * mut root::EBUSState , info : * const :: std :: os :: raw :: c_char , timeout : :: std :: os :: raw :: c_uint , nbuffers : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn w_tick_frequency ( state : * mut root::EBUSState ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn w_configure ( state : * mut root::EBUSState , parameter : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { pub fn w_begin_streaming ( state : * mut root::EBUSState ) ; } extern "C" { pub fn w_shutdown ( e : * mut root::EBUSState ) ; } extern "C" { pub fn w_acquire ( state : * mut root::EBUSState , buffer : * mut :: std :: os :: raw :: c_uchar , buflen : :: std :: os :: raw :: c_int , timeout : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn w_is_active ( state : * mut root::EBUSState ) -> bool ; } extern "C" { pub fn w_find ( timeout : :: std :: os :: raw :: c_uint ) -> * const :: std :: os :: raw :: c_char ; } }